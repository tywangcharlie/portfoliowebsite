{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ProcessBubbleType_1 = require(\"../../../../Enums/ProcessBubbleType\");\n\nvar Utils_1 = require(\"../../../../Utils/Utils\");\n\nvar HoverMode_1 = require(\"../../../../Enums/Modes/HoverMode\");\n\nvar ClickMode_1 = require(\"../../../../Enums/Modes/ClickMode\");\n\nvar Constants_1 = require(\"../../../../Utils/Constants\");\n\nvar ColorUtils_1 = require(\"../../../../Utils/ColorUtils\");\n\nvar Circle_1 = require(\"../../../../Utils/Circle\");\n\nvar Bubbler = function () {\n  function Bubbler() {}\n\n  Bubbler.reset = function (particle) {\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  };\n\n  Bubbler.bubble = function (container, _delta) {\n    var options = container.options;\n    var events = options.interactivity.events;\n    var onHover = events.onHover;\n    var onClick = events.onClick;\n    var hoverEnabled = onHover.enable;\n    var hoverMode = onHover.mode;\n    var clickEnabled = onClick.enable;\n    var clickMode = onClick.mode;\n\n    if (hoverEnabled && Utils_1.Utils.isInArray(HoverMode_1.HoverMode.bubble, hoverMode)) {\n      this.hoverBubble(container);\n    } else if (clickEnabled && Utils_1.Utils.isInArray(ClickMode_1.ClickMode.bubble, clickMode)) {\n      this.clickBubble(container);\n    }\n  };\n\n  Bubbler.process = function (container, particle, distMouse, timeSpent, data) {\n    var bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    var options = container.options;\n    var bubbleDuration = options.interactivity.modes.bubble.duration;\n    var bubbleDistance = container.retina.bubbleModeDistance;\n    var particlesParam = data.particlesObj.optValue;\n    var pObjBubble = data.bubbleObj.value;\n    var pObj = data.particlesObj.value || 0;\n    var type = data.type;\n\n    if (bubbleParam !== particlesParam) {\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n              particle.bubble.radius = value;\n            }\n\n            if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n            delete particle.bubble.radius;\n          }\n\n          if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n\n        if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  };\n\n  Bubbler.clickBubble = function (container) {\n    var _a;\n\n    var options = container.options;\n    var mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (mouseClickPos === undefined) {\n      return;\n    }\n\n    var distance = container.retina.bubbleModeDistance;\n    var query = container.particles.quadTree.query(new Circle_1.Circle(mouseClickPos.x, mouseClickPos.y, distance));\n\n    for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n      var particle = query_1[_i];\n      var pos = particle.getPosition();\n      var distMouse = Utils_1.Utils.getDistance(pos, mouseClickPos);\n      var timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (container.bubble.clicking) {\n        if (timeSpent > options.interactivity.modes.bubble.duration) {\n          container.bubble.durationEnd = true;\n        }\n\n        if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n          container.bubble.clicking = false;\n          container.bubble.durationEnd = false;\n        }\n\n        var sizeData = {\n          bubbleObj: {\n            optValue: container.retina.bubbleModeSize,\n            value: particle.bubble.radius\n          },\n          particlesObj: {\n            optValue: (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue,\n            value: particle.size.value\n          },\n          type: ProcessBubbleType_1.ProcessBubbleType.size\n        };\n        this.process(container, particle, distMouse, timeSpent, sizeData);\n        var opacityData = {\n          bubbleObj: {\n            optValue: options.interactivity.modes.bubble.opacity,\n            value: particle.bubble.opacity\n          },\n          particlesObj: {\n            optValue: particle.particlesOptions.opacity.value,\n            value: particle.opacity.value\n          },\n          type: ProcessBubbleType_1.ProcessBubbleType.opacity\n        };\n        this.process(container, particle, distMouse, timeSpent, opacityData);\n\n        if (!container.bubble.durationEnd) {\n          if (distMouse <= container.retina.bubbleModeDistance) {\n            this.hoverBubbleColor(container, particle);\n          } else {\n            delete particle.bubble.color;\n          }\n        } else {\n          delete particle.bubble.color;\n        }\n      }\n    }\n  };\n\n  Bubbler.hoverBubble = function (container) {\n    var mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    var distance = container.retina.bubbleModeDistance;\n    var query = container.particles.quadTree.query(new Circle_1.Circle(mousePos.x, mousePos.y, distance));\n\n    for (var _i = 0, query_2 = query; _i < query_2.length; _i++) {\n      var particle = query_2[_i];\n      var pos = particle.getPosition();\n      var distance_1 = Utils_1.Utils.getDistance(pos, mousePos);\n      var ratio = 1 - distance_1 / container.retina.bubbleModeDistance;\n\n      if (distance_1 <= container.retina.bubbleModeDistance) {\n        if (ratio >= 0 && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(container, particle, ratio);\n          this.hoverBubbleOpacity(container, particle, ratio);\n          this.hoverBubbleColor(container, particle);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Constants_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  };\n\n  Bubbler.hoverBubbleSize = function (container, particle, ratio) {\n    var _a;\n\n    var modeSize = container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    var optSize = (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue;\n    var pSize = particle.size.value;\n    var size = this.calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  };\n\n  Bubbler.hoverBubbleOpacity = function (container, particle, ratio) {\n    var options = container.options;\n    var modeOpacity = options.interactivity.modes.bubble.opacity;\n\n    if (modeOpacity === undefined) {\n      return;\n    }\n\n    var optOpacity = particle.particlesOptions.opacity.value;\n    var pOpacity = particle.opacity.value;\n    var opacity = this.calculateBubbleValue(pOpacity, modeOpacity, optOpacity, ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  };\n\n  Bubbler.calculateBubbleValue = function (particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue > optionsValue) {\n      var size = particleValue + (modeValue - optionsValue) * ratio;\n      return Utils_1.Utils.clamp(size, particleValue, modeValue);\n    } else if (modeValue < optionsValue) {\n      var size = particleValue - (optionsValue - modeValue) * ratio;\n      return Utils_1.Utils.clamp(size, modeValue, particleValue);\n    }\n  };\n\n  Bubbler.hoverBubbleColor = function (container, particle) {\n    var options = container.options;\n\n    if (particle.bubble.color === undefined) {\n      var modeColor = options.interactivity.modes.bubble.color;\n\n      if (modeColor === undefined) {\n        return;\n      }\n\n      particle.bubble.color = ColorUtils_1.ColorUtils.colorToRgb(modeColor instanceof Array ? Utils_1.Utils.itemFromArray(modeColor) : modeColor);\n    }\n  };\n\n  return Bubbler;\n}();\n\nexports.Bubbler = Bubbler;","map":null,"metadata":{},"sourceType":"script"}