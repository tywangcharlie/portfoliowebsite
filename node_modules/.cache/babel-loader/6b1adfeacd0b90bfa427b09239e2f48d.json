{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Particle_1 = require(\"../../Core/Particle\");\n\nvar Utils_1 = require(\"../../Utils/Utils\");\n\nvar SizeMode_1 = require(\"../../Enums/SizeMode\");\n\nvar EmitterSize_1 = require(\"../../Options/Classes/Emitters/EmitterSize\");\n\nvar Emitter = function () {\n  function Emitter(emitters, emitterOptions, position) {\n    var _a, _b, _c;\n\n    this.emitters = emitters;\n    this.container = emitters.container;\n    this.initialPosition = position;\n    this.emitterOptions = Utils_1.Utils.deepExtend({}, emitterOptions);\n    this.position = (_a = this.initialPosition) !== null && _a !== void 0 ? _a : this.calcPosition();\n    var particlesOptions = Utils_1.Utils.deepExtend({}, this.emitterOptions.particles);\n\n    if (particlesOptions === undefined) {\n      particlesOptions = {};\n    }\n\n    if (particlesOptions.move === undefined) {\n      particlesOptions.move = {};\n    }\n\n    if (particlesOptions.move.direction === undefined) {\n      particlesOptions.move.direction = this.emitterOptions.direction;\n    }\n\n    this.particlesOptions = particlesOptions;\n    this.size = (_b = this.emitterOptions.size) !== null && _b !== void 0 ? _b : function () {\n      var size = new EmitterSize_1.EmitterSize();\n      size.load({\n        height: 0,\n        width: 0,\n        mode: SizeMode_1.SizeMode.percent\n      });\n      return size;\n    }();\n    this.lifeCount = (_c = this.emitterOptions.life.count) !== null && _c !== void 0 ? _c : -1;\n    this.play();\n  }\n\n  Emitter.prototype.play = function () {\n    var _this = this;\n\n    if (this.lifeCount > 0 || !this.emitterOptions.life.count) {\n      if (this.startInterval === undefined) {\n        this.startInterval = window.setInterval(function () {\n          _this.emit();\n        }, 1000 * this.emitterOptions.rate.delay);\n      }\n\n      if (this.lifeCount > 0) {\n        this.prepareToDie();\n      }\n    }\n  };\n\n  Emitter.prototype.pause = function () {\n    var interval = this.startInterval;\n\n    if (interval !== undefined) {\n      clearInterval(interval);\n      delete this.startInterval;\n    }\n  };\n\n  Emitter.prototype.resize = function () {\n    var initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  };\n\n  Emitter.prototype.prepareToDie = function () {\n    var _this = this;\n\n    var _a;\n\n    if (this.lifeCount > 0 && ((_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration) !== undefined) {\n      window.setTimeout(function () {\n        var _a;\n\n        _this.pause();\n\n        _this.lifeCount--;\n\n        if (_this.lifeCount > 0) {\n          _this.position = _this.calcPosition();\n          window.setTimeout(function () {\n            _this.play();\n          }, (_a = _this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0);\n        } else {\n          _this.destroy();\n        }\n      }, this.emitterOptions.life.duration * 1000);\n    }\n  };\n\n  Emitter.prototype.destroy = function () {\n    this.emitters.removeEmitter(this);\n  };\n\n  Emitter.prototype.calcPosition = function () {\n    var _a;\n\n    var container = this.container;\n    var percentPosition = (_a = this.emitterOptions.position) !== null && _a !== void 0 ? _a : {\n      x: Math.random() * 100,\n      y: Math.random() * 100\n    };\n    return {\n      x: percentPosition.x / 100 * container.canvas.size.width,\n      y: percentPosition.y / 100 * container.canvas.size.height\n    };\n  };\n\n  Emitter.prototype.emit = function () {\n    var container = this.container;\n    var position = this.position;\n    var offset = {\n      x: this.size.mode === SizeMode_1.SizeMode.percent ? container.canvas.size.width * this.size.width / 100 : this.size.width,\n      y: this.size.mode === SizeMode_1.SizeMode.percent ? container.canvas.size.height * this.size.height / 100 : this.size.height\n    };\n\n    for (var i = 0; i < this.emitterOptions.rate.quantity; i++) {\n      var particle = new Particle_1.Particle(container, {\n        x: position.x + offset.x * (Math.random() - 0.5),\n        y: position.y + offset.y * (Math.random() - 0.5)\n      }, this.particlesOptions);\n      container.particles.addParticle(particle);\n    }\n  };\n\n  return Emitter;\n}();\n\nexports.Emitter = Emitter;","map":null,"metadata":{},"sourceType":"script"}