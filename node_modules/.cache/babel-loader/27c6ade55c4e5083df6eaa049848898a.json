{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar PolygonMaskType_1 = require(\"../../Enums/PolygonMaskType\");\n\nvar Particle_1 = require(\"../../Core/Particle\");\n\nvar PolygonMaskInlineArrangement_1 = require(\"../../Enums/PolygonMaskInlineArrangement\");\n\nvar Utils_1 = require(\"../../Utils/Utils\");\n\nvar Constants_1 = require(\"../../Utils/Constants\");\n\nvar ColorUtils_1 = require(\"../../Utils/ColorUtils\");\n\nvar PolygonMask = function () {\n  function PolygonMask(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.paths = [];\n    this.path2DSupported = window.hasOwnProperty(\"Path2D\");\n  }\n\n  PolygonMask.polygonBounce = function (particle) {\n    particle.velocity.horizontal = -particle.velocity.horizontal + particle.velocity.vertical / 2;\n    particle.velocity.vertical = -particle.velocity.vertical + particle.velocity.horizontal / 2;\n  };\n\n  PolygonMask.drawPolygonMask = function (context, rawData, stroke) {\n    var color = typeof stroke.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(stroke.color) : ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.beginPath();\n      context.moveTo(rawData[0].x, rawData[0].y);\n\n      for (var i = 1; i < rawData.length; i++) {\n        context.lineTo(rawData[i].x, rawData[i].y);\n      }\n\n      context.closePath();\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color);\n      context.lineWidth = stroke.width;\n      context.stroke();\n    }\n  };\n\n  PolygonMask.drawPolygonMaskPath = function (context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    var color = typeof stroke.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(stroke.color) : ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color, stroke.opacity);\n      context.lineWidth = stroke.width;\n      context.stroke(path);\n    }\n  };\n\n  PolygonMask.prototype.checkInsidePolygon = function (position) {\n    var container = this.container;\n    var options = container.options;\n\n    if (!options.polygon.enable || options.polygon.type === PolygonMaskType_1.PolygonMaskType.none || options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Constants_1.Constants.noPolygonFound);\n    }\n\n    var x = position ? position.x : Math.random() * container.canvas.size.width;\n    var y = position ? position.y : Math.random() * container.canvas.size.height;\n    var inside = false;\n\n    for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      var xi = this.raw[i].x;\n      var yi = this.raw[i].y;\n      var xj = this.raw[j].x;\n      var yj = this.raw[j].y;\n      var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.inside) {\n      return inside;\n    } else if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.outside) {\n      return !inside;\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.resize = function () {\n    var _this = this;\n\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none) {\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout(function () {\n        _this.parseSvgPathToPolygon().then(function (data) {\n          _this.raw = data;\n\n          _this.createPath2D();\n\n          container.particles.redraw();\n        });\n      }, 250);\n    }\n  };\n\n  PolygonMask.prototype.startAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var container, options, _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            container = this.container;\n            options = container.options;\n            if (!(options.polygon.enable && options.polygon.url)) return [3, 2];\n            _a = this;\n            return [4, this.parseSvgPathToPolygon(options.polygon.url)];\n\n          case 1:\n            _a.raw = _b.sent();\n            this.createPath2D();\n            _b.label = 2;\n\n          case 2:\n            return [2];\n        }\n      });\n    });\n  };\n\n  PolygonMask.prototype.stop = function () {\n    delete this.raw;\n    this.paths = [];\n    delete this.svg;\n  };\n\n  PolygonMask.prototype.randomPointInPolygon = function () {\n    var container = this.container;\n    var options = container.options;\n    var position;\n\n    if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      switch (options.polygon.inline.arrangement) {\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.randomPoint:\n          position = this.getRandomPointOnPolygonPath();\n          break;\n\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.randomLength:\n          position = this.getRandomPointOnPolygonPathByLength();\n          break;\n\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.equidistant:\n          position = this.getEquidistantPointOnPolygonPathByIndex(container.particles.count);\n          break;\n\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.onePerPoint:\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.perPoint:\n        default:\n          position = this.getPointOnPolygonPathByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPointInPolygon();\n    }\n  };\n\n  PolygonMask.prototype.particlesInitialization = function () {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline && (options.polygon.inline.arrangement === PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.onePerPoint || options.polygon.inline.arrangement === PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.perPoint)) {\n      this.drawPointsOnPolygonPath();\n      return true;\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.particlePosition = function (position) {\n    var _a, _b;\n\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\n      var pos = {\n        x: 0,\n        y: 0\n      };\n\n      if (position) {\n        pos.x = position.x;\n        pos.y = position.y;\n      } else {\n        var randomPoint = this.randomPointInPolygon();\n        pos.x = randomPoint.x;\n        pos.y = randomPoint.y;\n      }\n\n      return pos;\n    }\n  };\n\n  PolygonMask.prototype.particleBounce = function (particle, _delta) {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n      if (!this.checkInsidePolygon(particle.position)) {\n        PolygonMask.polygonBounce(particle);\n        return true;\n      }\n    } else if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      if (particle.initialPosition) {\n        var dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.position);\n\n        if (dist > container.retina.polygonMaskMoveRadius) {\n          PolygonMask.polygonBounce(particle);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.clickPositionValid = function (position) {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n      if (this.checkInsidePolygon(position)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.parseSvgPathToPolygon = function (svgUrl) {\n    var _a;\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var container, options, url, req, xml, parser, doc, svgPaths, i, path, pxRatio, scale, position, polygonRaw, _i, _b, path, len, p, i, segment, absSeg, relSeg;\n\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            container = this.container;\n            options = container.options;\n            url = svgUrl || options.polygon.url;\n            if (!(!this.paths.length || !this.svg)) return [3, 4];\n            return [4, fetch(url)];\n\n          case 1:\n            req = _c.sent();\n            if (!req.ok) return [3, 3];\n            return [4, req.text()];\n\n          case 2:\n            xml = _c.sent();\n            parser = new DOMParser();\n            doc = parser.parseFromString(xml, \"image/svg+xml\");\n            this.svg = doc.getElementsByTagName(\"svg\")[0];\n            svgPaths = doc.getElementsByTagName(\"path\");\n\n            for (i = 0; i < svgPaths.length; i++) {\n              path = svgPaths.item(i);\n\n              if (path) {\n                this.paths.push({\n                  element: path,\n                  length: path.getTotalLength()\n                });\n              }\n            }\n\n            return [3, 4];\n\n          case 3:\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n          case 4:\n            pxRatio = container.retina.pixelRatio;\n            scale = options.polygon.scale / pxRatio;\n            this.dimension.width = parseFloat(this.svg.getAttribute(\"width\") || \"0\") * scale;\n            this.dimension.height = parseFloat(this.svg.getAttribute(\"height\") || \"0\") * scale;\n            position = (_a = options.polygon.position) !== null && _a !== void 0 ? _a : {\n              x: 50,\n              y: 50\n            };\n            this.offset = {\n              x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n              y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n            };\n            polygonRaw = [];\n\n            for (_i = 0, _b = this.paths; _i < _b.length; _i++) {\n              path = _b[_i];\n              len = path.element.pathSegList.numberOfItems;\n              p = {\n                x: 0,\n                y: 0\n              };\n\n              for (i = 0; i < len; i++) {\n                segment = path.element.pathSegList.getItem(i);\n\n                switch (segment.pathSegType) {\n                  case window.SVGPathSeg.PATHSEG_MOVETO_ABS:\n                  case window.SVGPathSeg.PATHSEG_LINETO_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                  case window.SVGPathSeg.PATHSEG_ARC_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n                    absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_REL:\n                  case window.SVGPathSeg.PATHSEG_MOVETO_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                  case window.SVGPathSeg.PATHSEG_ARC_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n                    relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_UNKNOWN:\n                  case window.SVGPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n                }\n\n                polygonRaw.push({\n                  x: p.x * scale + this.offset.x,\n                  y: p.y * scale + this.offset.y\n                });\n              }\n            }\n\n            return [2, polygonRaw];\n        }\n      });\n    });\n  };\n\n  PolygonMask.prototype.draw = function (context) {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.draw.enable) {\n      var container_1 = this.container;\n      var options_1 = container_1.options;\n      var polygonDraw = options_1.polygon.draw;\n      var rawData = this.raw;\n\n      for (var _i = 0, _a = this.paths; _i < _a.length; _i++) {\n        var path = _a[_i];\n        var path2d = path.path2d;\n        var path2dSupported = this.path2DSupported;\n\n        if (context) {\n          if (path2dSupported && path2d && this.offset) {\n            PolygonMask.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            PolygonMask.drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      }\n    }\n  };\n\n  PolygonMask.prototype.drawPointsOnPolygonPath = function () {\n    var container = this.container;\n\n    if (this.raw) {\n      for (var _i = 0, _a = this.raw; _i < _a.length; _i++) {\n        var item = _a[_i];\n        var position = {\n          x: item.x,\n          y: item.y\n        };\n        container.particles.addParticle(new Particle_1.Particle(container, position));\n      }\n    }\n  };\n\n  PolygonMask.prototype.getRandomPointOnPolygonPath = function () {\n    if (!this.raw || !this.raw.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var coords = Utils_1.Utils.itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  };\n\n  PolygonMask.prototype.getRandomPointOnPolygonPathByLength = function () {\n    var _a, _b;\n\n    var container = this.container;\n    var options = container.options;\n    if (!this.raw || !this.raw.length || !this.paths.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var path = Utils_1.Utils.itemFromArray(this.paths);\n    var distance = Math.floor(Math.random() * path.length) + 1;\n    var point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.polygon.scale + (((_a = this.offset) === null || _a === void 0 ? void 0 : _a.x) || 0),\n      y: point.y * options.polygon.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.y) || 0)\n    };\n  };\n\n  PolygonMask.prototype.getEquidistantPointOnPolygonPathByIndex = function (index) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var container = this.container;\n    var options = container.options;\n    if (!this.raw || !this.raw.length || !this.paths.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var offset = 0;\n    var point;\n    var totalLength = this.paths.reduce(function (tot, path) {\n      return tot + path.length;\n    }, 0);\n    var distance = totalLength / options.particles.number.value;\n\n    for (var _i = 0, _g = this.paths; _i < _g.length; _i++) {\n      var path = _g[_i];\n      var pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_a = point === null || point === void 0 ? void 0 : point.x) !== null && _a !== void 0 ? _a : 0) * options.polygon.scale + ((_c = (_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) !== null && _c !== void 0 ? _c : 0),\n      y: ((_d = point === null || point === void 0 ? void 0 : point.y) !== null && _d !== void 0 ? _d : 0) * options.polygon.scale + ((_f = (_e = this.offset) === null || _e === void 0 ? void 0 : _e.y) !== null && _f !== void 0 ? _f : 0)\n    };\n  };\n\n  PolygonMask.prototype.getPointOnPolygonPathByIndex = function (index) {\n    if (!this.raw || !this.raw.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  };\n\n  PolygonMask.prototype.createPath2D = function () {\n    var _a;\n\n    if (!this.path2DSupported) {\n      return;\n    }\n\n    var _loop_1 = function (path) {\n      var pathData = (_a = path.element) === null || _a === void 0 ? void 0 : _a.getAttribute(\"d\");\n\n      if (pathData) {\n        var path2d = new Path2D(pathData);\n        var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        var finalPath = new Path2D();\n        var transform = matrix.scale(this_1.container.options.polygon.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (!path.path2d && this_1.raw) {\n        path.path2d = new Path2D();\n        path.path2d.moveTo(this_1.raw[0].x, this_1.raw[0].y);\n        this_1.raw.forEach(function (pos, i) {\n          var _a;\n\n          if (i > 0) {\n            (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n          }\n        });\n        path.path2d.closePath();\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _b = this.paths; _i < _b.length; _i++) {\n      var path = _b[_i];\n\n      _loop_1(path);\n    }\n  };\n\n  return PolygonMask;\n}();\n\nexports.PolygonMask = PolygonMask;","map":null,"metadata":{},"sourceType":"script"}