{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar MoveDirection_1 = require(\"../Enums/MoveDirection\");\n\nvar ColorUtils_1 = require(\"./ColorUtils\");\n\nvar Utils = function () {\n  function Utils() {}\n\n  Utils.replaceColorSvg = function (image, color, opacity) {\n    if (!image.svgData) {\n      return \"\";\n    }\n\n    var svgXml = image.svgData;\n    var rgbHex = /#([0-9A-F]{3,6})/gi;\n    return svgXml.replace(rgbHex, function () {\n      return ColorUtils_1.ColorUtils.getStyleFromColor(color, opacity);\n    });\n  };\n\n  Utils.clamp = function (num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  };\n\n  Utils.isInArray = function (value, array) {\n    return value === array || array instanceof Array && array.indexOf(value) > -1;\n  };\n\n  Utils.mix = function (comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n  };\n\n  Utils.getParticleBaseVelocity = function (particle) {\n    var velocityBase;\n\n    switch (particle.direction) {\n      case MoveDirection_1.MoveDirection.top:\n        velocityBase = {\n          x: 0,\n          y: -1\n        };\n        break;\n\n      case MoveDirection_1.MoveDirection.topRight:\n        velocityBase = {\n          x: 0.5,\n          y: -0.5\n        };\n        break;\n\n      case MoveDirection_1.MoveDirection.right:\n        velocityBase = {\n          x: 1,\n          y: -0\n        };\n        break;\n\n      case MoveDirection_1.MoveDirection.bottomRight:\n        velocityBase = {\n          x: 0.5,\n          y: 0.5\n        };\n        break;\n\n      case MoveDirection_1.MoveDirection.bottom:\n        velocityBase = {\n          x: 0,\n          y: 1\n        };\n        break;\n\n      case MoveDirection_1.MoveDirection.bottomLeft:\n        velocityBase = {\n          x: -0.5,\n          y: 1\n        };\n        break;\n\n      case MoveDirection_1.MoveDirection.left:\n        velocityBase = {\n          x: -1,\n          y: 0\n        };\n        break;\n\n      case MoveDirection_1.MoveDirection.topLeft:\n        velocityBase = {\n          x: -0.5,\n          y: -0.5\n        };\n        break;\n\n      default:\n        velocityBase = {\n          x: 0,\n          y: 0\n        };\n        break;\n    }\n\n    return velocityBase;\n  };\n\n  Utils.getDistance = function (pointA, pointB) {\n    var dx = pointA.x - pointB.x;\n    var dy = pointA.y - pointB.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  Utils.loadFont = function (character) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            return [4, document.fonts.load(character.weight + \" 36px '\" + character.font + \"'\")];\n\n          case 1:\n            _b.sent();\n\n            return [3, 3];\n\n          case 2:\n            _a = _b.sent();\n            return [3, 3];\n\n          case 3:\n            return [2];\n        }\n      });\n    });\n  };\n\n  Utils.arrayRandomIndex = function (array) {\n    return Math.floor(Math.random() * array.length);\n  };\n\n  Utils.itemFromArray = function (array, index) {\n    return array[index !== undefined ? index : this.arrayRandomIndex(array)];\n  };\n\n  Utils.randomInRange = function (min, max) {\n    return Math.random() * (max - min) + min;\n  };\n\n  Utils.isPointInside = function (point, size, radius) {\n    return this.areBoundsInside(this.calculateBounds(point, radius !== null && radius !== void 0 ? radius : 0), size);\n  };\n\n  Utils.areBoundsInside = function (bounds, size) {\n    return bounds.left < size.width && bounds.right > 0 && bounds.top < size.height && bounds.bottom > 0;\n  };\n\n  Utils.calculateBounds = function (point, radius) {\n    return {\n      bottom: point.y + radius,\n      left: point.x - radius,\n      right: point.x + radius,\n      top: point.y - radius\n    };\n  };\n\n  Utils.loadImage = function (source) {\n    return new Promise(function (resolve, reject) {\n      if (source) {\n        var image_1 = {\n          source: source,\n          type: source.substr(source.length - 3)\n        };\n        var img_1 = new Image();\n        img_1.addEventListener(\"load\", function () {\n          image_1.element = img_1;\n          resolve(image_1);\n        });\n        img_1.addEventListener(\"error\", function () {\n          reject(\"Error tsParticles - loading image: \" + source);\n        });\n        img_1.src = source;\n      } else {\n        reject(\"Error tsParticles - No image.src\");\n      }\n    });\n  };\n\n  Utils.downloadSvgImage = function (source) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var image, response, _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!source) return [3, 5];\n            image = {\n              source: source,\n              type: source.substr(source.length - 3)\n            };\n\n            if (image.type !== \"svg\") {\n              return [2, this.loadImage(source)];\n            }\n\n            return [4, fetch(image.source)];\n\n          case 1:\n            response = _b.sent();\n            if (!response.ok) return [3, 3];\n            _a = image;\n            return [4, response.text()];\n\n          case 2:\n            _a.svgData = _b.sent();\n            return [2, image];\n\n          case 3:\n            throw new Error(\"Error tsParticles - Image not found\");\n\n          case 4:\n            return [3, 6];\n\n          case 5:\n            throw new Error(\"Error tsParticles - No image.src\");\n\n          case 6:\n            return [2];\n        }\n      });\n    });\n  };\n\n  Utils.deepExtend = function (destination, source) {\n    var _a;\n\n    destination = destination !== null && destination !== void 0 ? destination : {};\n\n    for (var property in source) {\n      if (source[property] && source[property].constructor && source[property].constructor === Object) {\n        destination[property] = (_a = destination[property]) !== null && _a !== void 0 ? _a : {};\n        Utils.deepExtend(destination[property], source[property]);\n      } else {\n        destination[property] = source[property];\n      }\n    }\n\n    return destination;\n  };\n\n  return Utils;\n}();\n\nexports.Utils = Utils;","map":null,"metadata":{},"sourceType":"script"}