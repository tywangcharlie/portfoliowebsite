{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar Container_1 = require(\"./Container\");\n\nvar Constants_1 = require(\"../Utils/Constants\");\n\nvar Utils_1 = require(\"../Utils/Utils\");\n\nvar tsParticlesDom = [];\n\nvar Loader = function () {\n  function Loader() {}\n\n  Loader.dom = function () {\n    if (!tsParticlesDom) {\n      tsParticlesDom = [];\n    }\n\n    return tsParticlesDom;\n  };\n\n  Loader.domItem = function (index) {\n    var dom = Loader.dom();\n    var item = dom[index];\n\n    if (item && !item.destroyed) {\n      return item;\n    }\n\n    dom.splice(index, 1);\n  };\n\n  Loader.loadFromArray = function (tagId, params, index) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2, Loader.load(tagId, Utils_1.Utils.itemFromArray(params, index))];\n      });\n    });\n  };\n\n  Loader.setFromArray = function (id, domContainer, params, index) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2, Loader.set(id, domContainer, Utils_1.Utils.itemFromArray(params, index))];\n      });\n    });\n  };\n\n  Loader.load = function (tagId, params) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var domContainer;\n      return tslib_1.__generator(this, function (_a) {\n        domContainer = document.getElementById(tagId);\n\n        if (!domContainer) {\n          return [2];\n        }\n\n        return [2, this.set(tagId, domContainer, params)];\n      });\n    });\n  };\n\n  Loader.set = function (id, domContainer, params) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var dom, oldIndex, old, canvasEl, generatedCanvas, existingCanvases, newItem;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            dom = Loader.dom();\n            oldIndex = dom.findIndex(function (v) {\n              return v.id === id;\n            });\n\n            if (oldIndex >= 0) {\n              old = this.domItem(oldIndex);\n\n              if (old && !old.destroyed) {\n                old.destroy();\n                dom.splice(oldIndex, 1);\n              }\n            }\n\n            if (domContainer.tagName === \"canvas\") {\n              canvasEl = domContainer;\n              generatedCanvas = false;\n            } else {\n              existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n\n              if (existingCanvases.length) {\n                canvasEl = existingCanvases[0];\n\n                if (!canvasEl.className) {\n                  canvasEl.className = Constants_1.Constants.canvasClass;\n                }\n\n                generatedCanvas = false;\n              } else {\n                generatedCanvas = true;\n                canvasEl = document.createElement(\"canvas\");\n                canvasEl.className = Constants_1.Constants.canvasClass;\n                canvasEl.style.width = \"100%\";\n                canvasEl.style.height = \"100%\";\n                domContainer.appendChild(canvasEl);\n              }\n            }\n\n            newItem = new Container_1.Container(id, params);\n\n            if (oldIndex >= 0) {\n              dom.splice(oldIndex, 0, newItem);\n            } else {\n              dom.push(newItem);\n            }\n\n            newItem.canvas.loadCanvas(canvasEl, generatedCanvas);\n            return [4, newItem.start()];\n\n          case 1:\n            _a.sent();\n\n            return [2, newItem];\n        }\n      });\n    });\n  };\n\n  Loader.loadJSON = function (tagId, jsonUrl) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var response, params;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, fetch(jsonUrl)];\n\n          case 1:\n            response = _a.sent();\n            if (!response.ok) return [3, 3];\n            return [4, response.json()];\n\n          case 2:\n            params = _a.sent();\n\n            if (params instanceof Array) {\n              return [2, Loader.loadFromArray(tagId, params)];\n            } else {\n              return [2, Loader.load(tagId, params)];\n            }\n\n            return [3, 4];\n\n          case 3:\n            console.error(\"Error tsParticles - fetch status: \" + response.status);\n            console.error(\"Error tsParticles - File config not found\");\n            _a.label = 4;\n\n          case 4:\n            return [2];\n        }\n      });\n    });\n  };\n\n  ;\n\n  Loader.setJSON = function (id, domContainer, jsonUrl) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var response, params;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, fetch(jsonUrl)];\n\n          case 1:\n            response = _a.sent();\n            if (!response.ok) return [3, 3];\n            return [4, response.json()];\n\n          case 2:\n            params = _a.sent();\n\n            if (params instanceof Array) {\n              return [2, Loader.setFromArray(id, domContainer, params)];\n            } else {\n              return [2, Loader.set(id, domContainer, params)];\n            }\n\n            return [3, 4];\n\n          case 3:\n            console.error(\"Error tsParticles - fetch status: \" + response.status);\n            console.error(\"Error tsParticles - File config not found\");\n            _a.label = 4;\n\n          case 4:\n            return [2];\n        }\n      });\n    });\n  };\n\n  ;\n\n  Loader.setOnClickHandler = function (callback) {\n    var dom = Loader.dom();\n\n    if (dom.length === 0) {\n      throw new Error(\"Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()\");\n    }\n\n    for (var _i = 0, dom_1 = dom; _i < dom_1.length; _i++) {\n      var domItem = dom_1[_i];\n      var el = domItem.interactivity.element;\n\n      if (el) {\n        el.addEventListener(\"click\", callback);\n      }\n    }\n  };\n\n  return Loader;\n}();\n\nexports.Loader = Loader;","map":null,"metadata":{},"sourceType":"script"}