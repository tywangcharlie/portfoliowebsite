{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ColorUtils_1 = require(\"../../Utils/ColorUtils\");\n\nvar Utils_1 = require(\"../../Utils/Utils\");\n\nvar Absorber = function () {\n  function Absorber(absorbers, options, position) {\n    var _a, _b;\n\n    this.absorbers = absorbers;\n    this.container = absorbers.container;\n    this.initialPosition = position;\n    this.options = options;\n    var container = this.container;\n    var size = options.size.value * container.retina.pixelRatio;\n    var random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n    var minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n\n    if (random) {\n      size = Utils_1.Utils.randomInRange(minSize, size);\n    }\n\n    this.opacity = this.options.opacity;\n    this.size = size * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density;\n    var limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n    var color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = ColorUtils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n  }\n\n  Absorber.prototype.attract = function (particle, _delta) {\n    var pos = particle.getPosition();\n    var dx = this.position.x - pos.x;\n    var dy = this.position.y - pos.y;\n    var distance = Math.sqrt(Math.abs(dx * dx + dy * dy));\n    var angle = Math.atan2(dx, dy) * (180 / Math.PI);\n    var acceleration = this.mass / Math.pow(distance, 2);\n\n    if (distance < this.size + particle.size.value) {\n      var sizeFactor = particle.size.value * 0.033;\n\n      if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n        particle.destroyed = true;\n      } else {\n        particle.size.value -= sizeFactor;\n        particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n        particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n      }\n\n      if (this.limit === undefined || this.size < this.limit) {\n        this.size += sizeFactor;\n      }\n\n      this.mass += sizeFactor * this.options.size.density;\n    } else {\n      particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n      particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n    }\n  };\n\n  Absorber.prototype.resize = function () {\n    var initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  };\n\n  Absorber.prototype.draw = function (context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromColor(this.color, this.opacity);\n    context.fill();\n  };\n\n  Absorber.prototype.calcPosition = function () {\n    var _a;\n\n    var container = this.container;\n    var percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n      x: Math.random() * 100,\n      y: Math.random() * 100\n    };\n    return {\n      x: percentPosition.x / 100 * container.canvas.size.width,\n      y: percentPosition.y / 100 * container.canvas.size.height\n    };\n  };\n\n  return Absorber;\n}();\n\nexports.Absorber = Absorber;","map":null,"metadata":{},"sourceType":"script"}