{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ColorUtils_1 = require(\"../../../../Utils/ColorUtils\");\n\nvar Constants_1 = require(\"../../../../Utils/Constants\");\n\nvar Utils_1 = require(\"../../../../Utils/Utils\");\n\nvar Circle_1 = require(\"../../../../Utils/Circle\");\n\nvar Linker = function () {\n  function Linker() {}\n\n  Linker.link = function (p1, container, _delta) {\n    var _a;\n\n    var optOpacity = p1.particlesOptions.lineLinked.opacity;\n    var optDistance = (_a = p1.lineLinkedDistance) !== null && _a !== void 0 ? _a : container.retina.lineLinkedDistance;\n    var pos1 = p1.getPosition();\n    var query = container.particles.quadTree.query(new Circle_1.Circle(pos1.x, pos1.y, optDistance));\n\n    for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n      var p2 = query_1[_i];\n\n      if (p1 === p2 || !p2.particlesOptions.lineLinked.enable) {\n        continue;\n      }\n\n      var pos2 = p2.getPosition();\n      var distance = Utils_1.Utils.getDistance(pos1, pos2);\n      var opacityLine = optOpacity - distance * optOpacity / optDistance;\n\n      if (opacityLine > 0) {\n        if (!container.particles.lineLinkedColor) {\n          var optColor = p1.particlesOptions.lineLinked.color;\n          var color = typeof optColor === \"string\" ? optColor : optColor.value;\n\n          if (color === Constants_1.Constants.randomColorValue) {\n            if (p1.particlesOptions.lineLinked.consent) {\n              container.particles.lineLinkedColor = ColorUtils_1.ColorUtils.colorToRgb({\n                value: color\n              });\n            } else if (p1.particlesOptions.lineLinked.blink) {\n              container.particles.lineLinkedColor = Constants_1.Constants.randomColorValue;\n            } else {\n              container.particles.lineLinkedColor = Constants_1.Constants.midColorValue;\n            }\n          } else {\n            container.particles.lineLinkedColor = ColorUtils_1.ColorUtils.colorToRgb({\n              value: color\n            });\n          }\n        }\n\n        if (p2.links.map(function (t) {\n          return t.destination;\n        }).indexOf(p1) == -1 && p1.links.map(function (t) {\n          return t.destination;\n        }).indexOf(p2) == -1) {\n          p1.links.push({\n            destination: p2,\n            opacity: opacityLine\n          });\n        }\n      }\n    }\n  };\n\n  return Linker;\n}();\n\nexports.Linker = Linker;","map":null,"metadata":{},"sourceType":"script"}