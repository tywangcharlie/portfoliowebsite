{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ClickMode_1 = require(\"../../../../Enums/Modes/ClickMode\");\n\nvar HoverMode_1 = require(\"../../../../Enums/Modes/HoverMode\");\n\nvar OutMode_1 = require(\"../../../../Enums/OutMode\");\n\nvar Utils_1 = require(\"../../../../Utils/Utils\");\n\nvar DivMode_1 = require(\"../../../../Enums/Modes/DivMode\");\n\nvar Constants_1 = require(\"../../../../Utils/Constants\");\n\nvar Circle_1 = require(\"../../../../Utils/Circle\");\n\nvar Repulser = function () {\n  function Repulser() {}\n\n  Repulser.repulse = function (container, _delta) {\n    var options = container.options;\n    var interactivity = options.interactivity;\n    var hoverEnabled = interactivity.events.onHover.enable;\n    var clickEnabled = interactivity.events.onClick.enable;\n    var mouseMoveStatus = container.interactivity.status === Constants_1.Constants.mouseMoveEvent;\n    var hoverMode = interactivity.events.onHover.mode;\n    var clickMode = interactivity.events.onClick.mode;\n    var divMode = interactivity.events.onDiv.mode;\n\n    if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(HoverMode_1.HoverMode.repulse, hoverMode)) {\n      this.hoverRepulse(container);\n    } else if (clickEnabled && Utils_1.Utils.isInArray(ClickMode_1.ClickMode.repulse, clickMode)) {\n      this.clickRepulse(container);\n    } else if (interactivity.events.onDiv.enable && Utils_1.Utils.isInArray(DivMode_1.DivMode.repulse, divMode)) {\n      this.divRepulse(container);\n    }\n  };\n\n  Repulser.divRepulse = function (container) {\n    var options = container.options;\n    var elem = document.getElementById(options.interactivity.events.onDiv.elementId);\n\n    if (!elem) {\n      return;\n    }\n\n    var pos = {\n      x: elem.offsetLeft + elem.offsetWidth / 2,\n      y: elem.offsetTop + elem.offsetHeight / 2\n    };\n    var divWidth = elem.offsetWidth / 2;\n\n    if (container.retina.isRetina) {\n      pos.x *= container.retina.pixelRatio;\n      pos.y *= container.retina.pixelRatio;\n      divWidth *= container.retina.pixelRatio;\n    }\n\n    var repulseRadius = divWidth;\n    this.processRepulse(container, pos, repulseRadius);\n  };\n\n  Repulser.hoverRepulse = function (container) {\n    var mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    var repulseRadius = container.retina.repulseModeDistance;\n    this.processRepulse(container, mousePos, repulseRadius);\n  };\n\n  Repulser.processRepulse = function (container, position, repulseRadius) {\n    var query = container.particles.quadTree.query(new Circle_1.Circle(position.x, position.y, repulseRadius));\n\n    for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n      var particle = query_1[_i];\n      var dx = particle.position.x - position.x;\n      var dy = particle.position.y - position.y;\n      var dist = Math.sqrt(dx * dx + dy * dy);\n      var normVec = {\n        x: dx / dist,\n        y: dy / dist\n      };\n      var velocity = container.options.interactivity.modes.repulse.speed * 100;\n      var repulseFactor = Utils_1.Utils.clamp((1 - Math.pow(dist / repulseRadius, 2)) * velocity, 0, 50);\n      var outMode = particle.particlesOptions.move.outMode;\n      var sizeValue = particle.size.value;\n      var pos = {\n        x: particle.position.x + normVec.x * repulseFactor,\n        y: particle.position.y + normVec.y * repulseFactor\n      };\n\n      if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceVertical || outMode === OutMode_1.OutMode.bounceHorizontal) {\n        var isInside = {\n          horizontal: pos.x - sizeValue > 0 && pos.x + sizeValue < container.canvas.size.width,\n          vertical: pos.y - sizeValue > 0 && pos.y + sizeValue < container.canvas.size.height\n        };\n\n        if (outMode === OutMode_1.OutMode.bounceVertical || isInside.horizontal) {\n          particle.position.x = pos.x;\n        }\n\n        if (outMode === OutMode_1.OutMode.bounceHorizontal || isInside.vertical) {\n          particle.position.y = pos.y;\n        }\n      } else {\n        particle.position.x = pos.x;\n        particle.position.y = pos.y;\n      }\n    }\n  };\n\n  Repulser.clickRepulse = function (container) {\n    if (!container.repulse.finish) {\n      if (!container.repulse.count) {\n        container.repulse.count = 0;\n      }\n\n      container.repulse.count++;\n\n      if (container.repulse.count === container.particles.count) {\n        container.repulse.finish = true;\n      }\n    }\n\n    if (container.repulse.clicking) {\n      var repulseDistance = container.retina.repulseModeDistance;\n      var repulseRadius = Math.pow(repulseDistance / 6, 3);\n      var mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (mouseClickPos === undefined) {\n        return;\n      }\n\n      var range = new Circle_1.Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius);\n      var query = container.particles.quadTree.query(range);\n\n      for (var _i = 0, query_2 = query; _i < query_2.length; _i++) {\n        var particle = query_2[_i];\n\n        if ((particle === null || particle === void 0 ? void 0 : particle.position) === undefined) {\n          continue;\n        }\n\n        var dx = mouseClickPos.x - particle.position.x;\n        var dy = mouseClickPos.y - particle.position.y;\n        var d = dx * dx + dy * dy;\n        var velocity = container.options.interactivity.modes.repulse.speed;\n        var force = -repulseRadius * velocity / d;\n\n        if (d <= repulseRadius) {\n          container.repulse.particles.push(particle);\n          this.processClickRepulse(container, particle, dx, dy, force);\n        }\n      }\n    } else if (container.repulse.clicking === false) {\n      for (var _a = 0, _b = container.repulse.particles; _a < _b.length; _a++) {\n        var particle = _b[_a];\n        particle.velocity.horizontal = particle.initialVelocity.horizontal;\n        particle.velocity.vertical = particle.initialVelocity.vertical;\n      }\n\n      container.repulse.particles = [];\n    }\n  };\n\n  Repulser.processClickRepulse = function (container, particle, dx, dy, force) {\n    var options = container.options;\n    var f = Math.atan2(dy, dx);\n    particle.velocity.horizontal = force * Math.cos(f);\n    particle.velocity.vertical = force * Math.sin(f);\n    var outMode = options.particles.move.outMode;\n\n    if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceHorizontal || outMode === OutMode_1.OutMode.bounceVertical) {\n      var pos = {\n        x: particle.position.x + particle.velocity.horizontal,\n        y: particle.position.y + particle.velocity.vertical\n      };\n\n      if (outMode !== OutMode_1.OutMode.bounceVertical) {\n        if (pos.x + particle.size.value > container.canvas.size.width || pos.x - particle.size.value < 0) {\n          particle.velocity.horizontal = -particle.velocity.horizontal;\n        }\n      }\n\n      if (outMode !== OutMode_1.OutMode.bounceHorizontal) {\n        if (pos.y + particle.size.value > container.canvas.size.height || pos.y - particle.size.value < 0) {\n          particle.velocity.vertical = -particle.velocity.vertical;\n        }\n      }\n    }\n  };\n\n  return Repulser;\n}();\n\nexports.Repulser = Repulser;","map":null,"metadata":{},"sourceType":"script"}