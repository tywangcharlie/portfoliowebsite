{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Constants_1 = require(\"../Utils/Constants\");\n\nvar CanvasUtils_1 = require(\"../Utils/CanvasUtils\");\n\nvar ColorUtils_1 = require(\"../Utils/ColorUtils\");\n\nvar Canvas = function () {\n  function Canvas(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  Canvas.prototype.init = function () {\n    this.resize();\n    var container = this.container;\n    var options = container.options;\n    var cover = options.backgroundMask.cover;\n    var color = cover.color;\n    var trail = options.particles.move.trail;\n    this.coverColor = ColorUtils_1.ColorUtils.colorToRgb(color);\n    this.trailFillColor = ColorUtils_1.ColorUtils.colorToRgb(trail.fillColor);\n    this.paint();\n  };\n\n  Canvas.prototype.loadCanvas = function (canvas, generatedCanvas) {\n    var _a;\n\n    if (!canvas.className) {\n      canvas.className = Constants_1.Constants.canvasClass;\n    }\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n    this.element = canvas;\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  };\n\n  Canvas.prototype.destroy = function () {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    if (this.context) {\n      CanvasUtils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  };\n\n  Canvas.prototype.resize = function () {\n    if (this.element) {\n      this.element.width = this.size.width;\n      this.element.height = this.size.height;\n    }\n  };\n\n  Canvas.prototype.paint = function () {\n    var container = this.container;\n    var options = container.options;\n\n    if (this.context) {\n      if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n        this.paintBase(ColorUtils_1.ColorUtils.getStyleFromColor(this.coverColor));\n      } else {\n        this.paintBase();\n      }\n    }\n  };\n\n  Canvas.prototype.clear = function () {\n    var container = this.container;\n    var options = container.options;\n    var trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(ColorUtils_1.ColorUtils.getStyleFromColor(this.trailFillColor, 1 / trail.length));\n    } else if (this.context) {\n      CanvasUtils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  };\n\n  Canvas.prototype.isPointInPath = function (path, point) {\n    var _a, _b;\n\n    return (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.isPointInPath(path, point.x, point.y)) !== null && _b !== void 0 ? _b : false;\n  };\n\n  Canvas.prototype.drawLinkedLine = function (p1, link) {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n    var p2 = link.destination;\n    var opacity = link.opacity;\n    var pos1 = p1.getPosition();\n    var pos2 = p2.getPosition();\n    var ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    var colorLine;\n    var twinkle = p1.particlesOptions.twinkle.lines;\n\n    if (twinkle.enable) {\n      var twinkleFreq = twinkle.frequency;\n      var twinkleColor = typeof twinkle.color === \"string\" ? {\n        value: twinkle.color\n      } : twinkle.color;\n      var twinkleRgb = twinkleColor !== undefined ? ColorUtils_1.ColorUtils.colorToRgb(twinkleColor) : undefined;\n      var twinkling = Math.random() < twinkleFreq;\n\n      if (twinkling && twinkleRgb !== undefined) {\n        colorLine = twinkleRgb;\n        opacity = twinkle.opacity;\n      }\n    }\n\n    if (!colorLine) {\n      if (container.particles.lineLinkedColor === Constants_1.Constants.randomColorValue) {\n        colorLine = ColorUtils_1.ColorUtils.getRandomRgbColor();\n      } else if (container.particles.lineLinkedColor == \"mid\" && p1.color && p2.color) {\n        var sourceColor = p1.color;\n        var destColor = p2.color;\n        colorLine = ColorUtils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n      } else {\n        colorLine = container.particles.lineLinkedColor;\n      }\n    }\n\n    var width = (_a = p1.lineLinkedWidth) !== null && _a !== void 0 ? _a : container.retina.lineLinkedWidth;\n    CanvasUtils_1.CanvasUtils.drawLinkedLine(ctx, width, pos1, pos2, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.lineLinked.shadow);\n  };\n\n  Canvas.prototype.drawConnectLine = function (p1, p2) {\n    var _a;\n\n    var lineStyle = this.lineStyle(p1, p2);\n\n    if (!lineStyle) {\n      return;\n    }\n\n    var ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    var pos1 = p1.getPosition();\n    var pos2 = p2.getPosition();\n    CanvasUtils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.lineLinkedWidth) !== null && _a !== void 0 ? _a : this.container.retina.lineLinkedWidth, lineStyle, pos1, pos2);\n  };\n\n  Canvas.prototype.drawGrabLine = function (particle, opacity, mousePos) {\n    var _a;\n\n    var container = this.container;\n    var optColor = particle.particlesOptions.lineLinked.color;\n    var lineColor = container.particles.grabLineColor || (typeof optColor === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(optColor) : ColorUtils_1.ColorUtils.colorToRgb(optColor));\n\n    if (lineColor == Constants_1.Constants.randomColorValue) {\n      lineColor = ColorUtils_1.ColorUtils.getRandomRgbColor();\n    }\n\n    container.particles.grabLineColor = lineColor;\n    var ctx = container.canvas.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    var colorLine;\n\n    if (container.particles.grabLineColor === Constants_1.Constants.randomColorValue) {\n      colorLine = ColorUtils_1.ColorUtils.getRandomRgbColor();\n    } else {\n      colorLine = container.particles.grabLineColor;\n    }\n\n    if (colorLine === undefined) {\n      return;\n    }\n\n    var beginPos = particle.getPosition();\n    CanvasUtils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.lineLinkedWidth) !== null && _a !== void 0 ? _a : container.retina.lineLinkedWidth, beginPos, mousePos, colorLine, opacity);\n  };\n\n  Canvas.prototype.drawParticle = function (particle, delta) {\n    var _a, _b, _c;\n\n    var container = this.container;\n    var options = container.options;\n    var twinkle = particle.particlesOptions.twinkle.particles;\n    var twinkleFreq = twinkle.frequency;\n    var twinkleColor = typeof twinkle.color === \"string\" ? {\n      value: twinkle.color\n    } : twinkle.color;\n    var twinkleRgb = twinkleColor !== undefined ? ColorUtils_1.ColorUtils.colorToRgb(twinkleColor) : undefined;\n    var twinkling = twinkle.enable && Math.random() < twinkleFreq;\n    var radius = (_a = particle.bubble.radius) !== null && _a !== void 0 ? _a : particle.size.value;\n    var opacity = twinkling ? twinkle.opacity : (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : particle.opacity.value;\n    var infectionStage = particle.infectionStage;\n    var infection = options.infection;\n    var infectionStages = infection.stages;\n    var infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n    var infectionRgb = infectionColor ? ColorUtils_1.ColorUtils.colorToRgb(infectionColor) : undefined;\n    var color = twinkling && twinkleRgb !== undefined ? twinkleRgb : (_c = infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : particle.bubble.color) !== null && _c !== void 0 ? _c : particle.color;\n    var colorValue = color !== undefined ? ColorUtils_1.ColorUtils.getStyleFromColor(color, opacity) : undefined;\n\n    if (!this.context || !colorValue) {\n      return;\n    }\n\n    this.context.save();\n\n    for (var _i = 0, _d = particle.links; _i < _d.length; _i++) {\n      var link = _d[_i];\n      this.drawLinkedLine(particle, link);\n    }\n\n    this.context.restore();\n    CanvasUtils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, colorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n  };\n\n  Canvas.prototype.drawPlugin = function (plugin, delta) {\n    if (!this.context) {\n      return;\n    }\n\n    CanvasUtils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n  };\n\n  Canvas.prototype.paintBase = function (baseColor) {\n    if (this.context) {\n      CanvasUtils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n  };\n\n  Canvas.prototype.lineStyle = function (p1, p2) {\n    var container = this.container;\n    var options = container.options;\n    var connectOptions = options.interactivity.modes.connect;\n\n    if (p1.color && p2.color) {\n      if (this.context) {\n        return CanvasUtils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.lineLinked.opacity);\n      }\n    }\n  };\n\n  Canvas.prototype.initBackground = function () {\n    var container = this.container;\n    var options = container.options;\n    var background = options.background;\n    var element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    var elementStyle = element.style;\n\n    if (background.color) {\n      var color = ColorUtils_1.ColorUtils.colorToRgb(background.color);\n\n      if (color) {\n        elementStyle.backgroundColor = ColorUtils_1.ColorUtils.getStyleFromColor(color, background.opacity);\n      }\n    }\n\n    if (background.image) {\n      elementStyle.backgroundImage = background.image;\n    }\n\n    if (background.position) {\n      elementStyle.backgroundPosition = background.position;\n    }\n\n    if (background.repeat) {\n      elementStyle.backgroundRepeat = background.repeat;\n    }\n\n    if (background.size) {\n      elementStyle.backgroundSize = background.size;\n    }\n  };\n\n  return Canvas;\n}();\n\nexports.Canvas = Canvas;","map":null,"metadata":{},"sourceType":"script"}