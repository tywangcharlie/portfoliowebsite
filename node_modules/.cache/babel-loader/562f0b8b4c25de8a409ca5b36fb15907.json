{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ColorUtils_1 = require(\"./ColorUtils\");\n\nvar CanvasUtils = function () {\n  function CanvasUtils() {}\n\n  CanvasUtils.paintBase = function (context, dimension, baseColor) {\n    context.save();\n    context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n    context.restore();\n  };\n\n  CanvasUtils.clear = function (context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n  };\n\n  CanvasUtils.drawLinkedLine = function (context, width, begin, end, backgroundMask, colorLine, opacity, shadow) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = 'destination-out';\n    }\n\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(colorLine, opacity);\n\n    if (shadow.enable) {\n      var shadowColor = typeof shadow.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(shadow.color) : ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n      if (shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromColor(shadowColor);\n      }\n    }\n\n    context.stroke();\n  };\n\n  CanvasUtils.drawConnectLine = function (context, width, lineStyle, begin, end) {\n    context.save();\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n    context.restore();\n  };\n\n  CanvasUtils.gradient = function (context, p1, p2, opacity) {\n    var gradStop = Math.floor(p2.size.value / p1.size.value);\n\n    if (!p1.color || !p2.color) {\n      return;\n    }\n\n    var sourcePos = p1.getPosition();\n    var destPos = p2.getPosition();\n    var midRgb = ColorUtils_1.ColorUtils.mix(p1.color, p2.color, p1.size.value, p2.size.value);\n    var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromColor(p1.color, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromColor(midRgb, opacity));\n    grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromColor(p2.color, opacity));\n    return grad;\n  };\n\n  CanvasUtils.drawGrabLine = function (context, width, begin, end, colorLine, opacity) {\n    context.save();\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n    context.restore();\n  };\n\n  CanvasUtils.drawParticle = function (container, context, particle, delta, colorValue, backgroundMask, radius, opacity, shadow) {\n    var pos = particle.getPosition();\n    context.save();\n    context.translate(pos.x, pos.y);\n    context.beginPath();\n\n    if (particle.angle !== 0) {\n      context.rotate(particle.angle * Math.PI / 180);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    var shadowColor = particle.shadowColor;\n\n    if (shadow.enable && shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromColor(shadowColor);\n      context.shadowOffsetX = shadow.offset.x;\n      context.shadowOffsetY = shadow.offset.y;\n    }\n\n    context.fillStyle = colorValue;\n    var stroke = particle.stroke;\n\n    if (stroke.width > 0 && particle.strokeColor) {\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(particle.strokeColor, particle.stroke.opacity);\n      context.lineWidth = stroke.width;\n    }\n\n    this.drawShape(container, context, particle, radius, opacity, delta);\n\n    if (particle.close) {\n      context.closePath();\n    }\n\n    if (stroke.width > 0 && particle.strokeColor) {\n      context.stroke();\n    }\n\n    if (particle.fill) {\n      context.fill();\n    }\n\n    context.restore();\n    context.save();\n    context.translate(pos.x, pos.y);\n\n    if (particle.angle !== 0) {\n      context.rotate(particle.angle * Math.PI / 180);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    this.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    context.restore();\n  };\n\n  CanvasUtils.drawShape = function (container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    var drawer = container.drawers[particle.shape];\n\n    if (!drawer) {\n      return;\n    }\n\n    drawer.draw(context, particle, radius, opacity, delta);\n  };\n\n  CanvasUtils.drawShapeAfterEffect = function (container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    var drawer = container.drawers[particle.shape];\n\n    if (!drawer) {\n      return;\n    }\n\n    if (drawer.afterEffect !== undefined) {\n      drawer.afterEffect(context, particle, radius, opacity, delta);\n    }\n  };\n\n  CanvasUtils.drawPlugin = function (context, plugin, delta) {\n    context.save();\n\n    if (plugin.draw !== undefined) {\n      plugin.draw(context, delta);\n    }\n\n    context.restore();\n  };\n\n  return CanvasUtils;\n}();\n\nexports.CanvasUtils = CanvasUtils;","map":null,"metadata":{},"sourceType":"script"}