{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ClickMode_1 = require(\"../Enums/Modes/ClickMode\");\n\nvar InteractivityDetect_1 = require(\"../Enums/InteractivityDetect\");\n\nvar Constants_1 = require(\"./Constants\");\n\nvar EventListeners = function () {\n  function EventListeners(container) {\n    var _this = this;\n\n    this.container = container;\n    this.canPush = true;\n\n    this.mouseMoveHandler = function (e) {\n      return _this.mouseTouchMove(e);\n    };\n\n    this.touchStartHandler = function (e) {\n      return _this.mouseTouchMove(e);\n    };\n\n    this.touchMoveHandler = function (e) {\n      return _this.mouseTouchMove(e);\n    };\n\n    this.touchEndHandler = function () {\n      return _this.mouseTouchFinish();\n    };\n\n    this.mouseLeaveHandler = function () {\n      return _this.mouseTouchFinish();\n    };\n\n    this.touchCancelHandler = function () {\n      return _this.mouseTouchFinish();\n    };\n\n    this.touchEndClickHandler = function (e) {\n      return _this.mouseTouchClick(e);\n    };\n\n    this.mouseUpHandler = function (e) {\n      return _this.mouseTouchClick(e);\n    };\n\n    this.visibilityChangeHandler = function () {\n      return _this.handleVisibilityChange();\n    };\n\n    this.resizeHandler = function () {\n      return _this.handleWindowResize();\n    };\n  }\n\n  EventListeners.manageListener = function (element, event, handler, add, options) {\n    if (add) {\n      var addOptions = {\n        passive: true\n      };\n\n      if (typeof options === \"boolean\") {\n        addOptions.capture = options;\n      } else if (options !== undefined) {\n        addOptions = options;\n      }\n\n      EventListeners.addListener(element, event, handler, addOptions);\n    } else {\n      EventListeners.removeListener(element, event, handler, options);\n    }\n  };\n\n  EventListeners.addListener = function (element, event, handler, options) {\n    element.addEventListener(event, handler, options);\n  };\n\n  EventListeners.removeListener = function (element, event, handler, options) {\n    element.removeEventListener(event, handler, options);\n  };\n\n  EventListeners.prototype.addListeners = function () {\n    this.manageListeners(true);\n  };\n\n  EventListeners.prototype.removeListeners = function () {\n    this.manageListeners(false);\n  };\n\n  EventListeners.prototype.manageListeners = function (add) {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.interactivity.detectsOn === InteractivityDetect_1.InteractivityDetect.window) {\n      container.interactivity.element = window;\n    } else if (options.interactivity.detectsOn === InteractivityDetect_1.InteractivityDetect.parent && container.canvas.element) {\n      container.interactivity.element = container.canvas.element.parentNode;\n    } else {\n      container.interactivity.element = container.canvas.element;\n    }\n\n    var interactivityEl = container.interactivity.element;\n\n    if (interactivityEl && (options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n      EventListeners.manageListener(interactivityEl, Constants_1.Constants.mouseMoveEvent, this.mouseMoveHandler, add);\n      EventListeners.manageListener(interactivityEl, Constants_1.Constants.touchStartEvent, this.touchStartHandler, add);\n      EventListeners.manageListener(interactivityEl, Constants_1.Constants.touchMoveEvent, this.touchMoveHandler, add);\n\n      if (!options.interactivity.events.onClick.enable) {\n        EventListeners.manageListener(interactivityEl, Constants_1.Constants.touchEndEvent, this.touchEndHandler, add);\n      }\n\n      EventListeners.manageListener(interactivityEl, Constants_1.Constants.mouseLeaveEvent, this.mouseLeaveHandler, add);\n      EventListeners.manageListener(interactivityEl, Constants_1.Constants.touchCancelEvent, this.touchCancelHandler, add);\n    }\n\n    if (options.interactivity.events.onClick.enable && interactivityEl) {\n      EventListeners.manageListener(interactivityEl, Constants_1.Constants.touchEndEvent, this.touchEndClickHandler, add);\n      EventListeners.manageListener(interactivityEl, Constants_1.Constants.mouseUpEvent, this.mouseUpHandler, add);\n    }\n\n    if (options.interactivity.events.resize) {\n      EventListeners.manageListener(window, Constants_1.Constants.resizeEvent, this.resizeHandler, add);\n    }\n\n    if (document) {\n      EventListeners.manageListener(document, Constants_1.Constants.visibilityChangeEvent, this.visibilityChangeHandler, add, false);\n    }\n  };\n\n  EventListeners.prototype.handleWindowResize = function () {\n    var container = this.container;\n    var options = container.options;\n\n    if (!container.canvas.element) {\n      return;\n    }\n\n    container.canvas.size.width = container.canvas.element.offsetWidth;\n    container.canvas.size.height = container.canvas.element.offsetHeight;\n\n    if (container.retina.isRetina) {\n      container.canvas.size.width *= container.retina.pixelRatio;\n      container.canvas.size.height *= container.retina.pixelRatio;\n    }\n\n    container.canvas.element.width = container.canvas.size.width;\n    container.canvas.element.height = container.canvas.size.height;\n\n    if (!options.particles.move.enable) {\n      container.particles.redraw();\n    }\n\n    container.densityAutoParticles();\n\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n  };\n\n  EventListeners.prototype.handleVisibilityChange = function () {\n    var container = this.container;\n    var options = container.options;\n\n    if (!options.pauseOnBlur) {\n      return;\n    }\n\n    if (document === null || document === void 0 ? void 0 : document.hidden) {\n      container.pageHidden = true;\n      container.pause();\n    } else {\n      container.pageHidden = false;\n\n      if (container.getAnimationStatus()) {\n        container.play(true);\n      } else {\n        container.draw();\n      }\n    }\n  };\n\n  EventListeners.prototype.mouseTouchMove = function (e) {\n    var _a, _b, _c, _d;\n\n    var container = this.container;\n    var options = container.options;\n    var pos;\n\n    if (e.type.startsWith(\"mouse\")) {\n      this.canPush = true;\n      var mouseEvent = e;\n\n      if (((_a = container.interactivity) === null || _a === void 0 ? void 0 : _a.element) === undefined) {\n        return;\n      }\n\n      if (container.interactivity.element === window) {\n        if (container.canvas.element) {\n          var clientRect = container.canvas.element.getBoundingClientRect();\n          pos = {\n            x: mouseEvent.clientX - clientRect.left,\n            y: mouseEvent.clientY - clientRect.top\n          };\n        }\n      } else if (options.interactivity.detectsOn === InteractivityDetect_1.InteractivityDetect.parent) {\n        var source = mouseEvent.target;\n        var target = mouseEvent.currentTarget;\n\n        if (source && target) {\n          var sourceRect = source.getBoundingClientRect();\n          var targetRect = target.getBoundingClientRect();\n          pos = {\n            x: mouseEvent.offsetX + sourceRect.left - targetRect.left,\n            y: mouseEvent.offsetY + sourceRect.top - targetRect.top\n          };\n        } else {\n          pos = {\n            x: mouseEvent.offsetX || mouseEvent.clientX,\n            y: mouseEvent.offsetY || mouseEvent.clientY\n          };\n        }\n      } else {\n        if (mouseEvent.target === container.canvas.element) {\n          pos = {\n            x: mouseEvent.offsetX || mouseEvent.clientX,\n            y: mouseEvent.offsetY || mouseEvent.clientY\n          };\n        }\n      }\n    } else {\n      this.canPush = e.type !== \"touchmove\";\n      var touchEvent = e;\n      var lastTouch = touchEvent.touches[touchEvent.touches.length - 1];\n      var canvasRect = (_b = container.canvas.element) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();\n      pos = {\n        x: lastTouch.clientX - ((_c = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.left) !== null && _c !== void 0 ? _c : 0),\n        y: lastTouch.clientY - ((_d = canvasRect === null || canvasRect === void 0 ? void 0 : canvasRect.top) !== null && _d !== void 0 ? _d : 0)\n      };\n    }\n\n    container.interactivity.mouse.position = pos;\n\n    if (container.retina.isRetina && container.interactivity.mouse.position) {\n      container.interactivity.mouse.position.x *= container.retina.pixelRatio;\n      container.interactivity.mouse.position.y *= container.retina.pixelRatio;\n    }\n\n    container.interactivity.status = Constants_1.Constants.mouseMoveEvent;\n  };\n\n  EventListeners.prototype.mouseTouchFinish = function () {\n    var container = this.container;\n    delete container.interactivity.mouse.position;\n    container.interactivity.status = Constants_1.Constants.mouseLeaveEvent;\n  };\n\n  EventListeners.prototype.mouseTouchClick = function (e) {\n    var container = this.container;\n    var options = container.options;\n    var handled = false;\n    var mousePosition = container.interactivity.mouse.position;\n\n    if (mousePosition === undefined || !options.interactivity.events.onClick.enable) {\n      return;\n    }\n\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n\n      if (plugin.clickPositionValid !== undefined) {\n        handled = plugin.clickPositionValid(mousePosition);\n\n        if (handled) {\n          break;\n        }\n      }\n    }\n\n    if (!handled) {\n      this.doMouseTouchClick(e);\n    }\n  };\n\n  EventListeners.prototype.doMouseTouchClick = function (e) {\n    var _this = this;\n\n    var container = this.container;\n    var options = container.options;\n\n    if (this.canPush) {\n      if (container.interactivity.mouse.position) {\n        container.interactivity.mouse.clickPosition = {\n          x: container.interactivity.mouse.position.x,\n          y: container.interactivity.mouse.position.y\n        };\n      } else {\n        return;\n      }\n\n      container.interactivity.mouse.clickTime = new Date().getTime();\n\n      if (options.interactivity.events.onClick.mode instanceof Array) {\n        for (var _i = 0, _a = options.interactivity.events.onClick.mode; _i < _a.length; _i++) {\n          var mode = _a[_i];\n          this.handleClickMode(mode);\n        }\n      } else {\n        var mode = options.interactivity.events.onClick.mode;\n        this.handleClickMode(mode);\n      }\n    }\n\n    if (e.type === \"touchend\") {\n      setTimeout(function () {\n        return _this.mouseTouchFinish();\n      }, 500);\n    }\n  };\n\n  EventListeners.prototype.handleClickMode = function (mode) {\n    var container = this.container;\n    var options = container.options;\n    var pushNb = options.interactivity.modes.push.quantity;\n    var removeNb = options.interactivity.modes.remove.quantity;\n\n    switch (mode) {\n      case ClickMode_1.ClickMode.push:\n        if (options.particles.move.enable) {\n          container.particles.push(pushNb, container.interactivity.mouse);\n        } else {\n          if (options.interactivity.modes.push.quantity === 1) {\n            container.particles.push(pushNb, container.interactivity.mouse);\n          } else if (options.interactivity.modes.push.quantity > 1) {\n            container.particles.push(pushNb);\n          }\n        }\n\n        break;\n\n      case ClickMode_1.ClickMode.remove:\n        container.particles.removeQuantity(removeNb);\n        break;\n\n      case ClickMode_1.ClickMode.bubble:\n        container.bubble.clicking = true;\n        break;\n\n      case ClickMode_1.ClickMode.repulse:\n        container.repulse.clicking = true;\n        container.repulse.count = 0;\n\n        for (var _i = 0, _a = container.repulse.particles; _i < _a.length; _i++) {\n          var particle = _a[_i];\n          particle.velocity.horizontal = particle.initialVelocity.horizontal;\n          particle.velocity.vertical = particle.initialVelocity.vertical;\n        }\n\n        container.repulse.particles = [];\n        container.repulse.finish = false;\n        setTimeout(function () {\n          if (!container.destroyed) {\n            container.repulse.clicking = false;\n          }\n        }, options.interactivity.modes.repulse.duration * 1000);\n        break;\n    }\n\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n\n      if (plugin.handleClickMode) {\n        plugin.handleClickMode(mode);\n      }\n    }\n  };\n\n  return EventListeners;\n}();\n\nexports.EventListeners = EventListeners;","map":null,"metadata":{},"sourceType":"script"}